Terminals unused in grammar

   T_keyword
   T_return
   T_InputStream
   T_OutputStream
   T_RelationalOperator
   T_LogicalOperator
   T_UnaryOperator
   T_character
   T_whiteSpace


State 104 conflicts: 1 shift/reduce
State 144 conflicts: 1 shift/reduce


Grammar

    0 $accept: Start $end

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis openflower block_end_flower

    2 block_end_flower: stmt Multiple_stmts
    3                 | closeflower

    4 block: openflower block_end_flower
    5      | stmt
    6      | T_Semicolon

    7 Multiple_stmts: stmt Multiple_stmts
    8               | closeflower

    9 stmt: expr T_Semicolon
   10     | if_stmt
   11     | while_stmt
   12     | for_stmt
   13     | Assignment_stmt T_Semicolon
   14     | error T_Semicolon

   15 for_stmt: T_for T_openParenthesis expr_or_empty T_Semicolon expr_or_empty T_Semicolon expr_or_empty T_closedParanthesis block

   16 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block

   17 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty

   18 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   19                  | T_else Multiple_stmts_not_if
   20                  | T_else openflower block_end_flower
   21                  | %empty

   22 Multiple_stmts_not_if: stmt_without_if Multiple_stmts
   23                      | T_Semicolon

   24 stmt_without_if: expr T_Semicolon
   25                | Assignment_stmt T_Semicolon
   26                | while_stmt
   27                | for_stmt

   28 Assignment_stmt: idid T_AssignmentOperator expr
   29                | idid T_shortHand expr
   30                | T_type idid T_AssignmentOperator expr_without_constants
   31                | T_type idid T_AssignmentOperator sc
   32                | T_type idid T_AssignmentOperator nc
   33                | T_int idid T_AssignmentOperator expr_without_constants
   34                | T_int idid T_AssignmentOperator nc

   35 expr_without_constants: idid
   36                       | expr T_plus expr
   37                       | expr T_minus expr
   38                       | expr T_divide expr
   39                       | expr T_multiply expr
   40                       | expr T_mod expr
   41                       | expr T_LogicalAnd expr
   42                       | expr T_LogicalOr expr
   43                       | expr T_less expr
   44                       | expr T_less_equal expr
   45                       | expr T_greater expr
   46                       | expr T_greater_equal expr
   47                       | expr T_equal_equal expr
   48                       | expr T_not_equal expr

   49 expr: nc
   50     | sc
   51     | idid
   52     | expr T_plus expr
   53     | expr T_minus expr
   54     | expr T_divide expr
   55     | expr T_multiply expr
   56     | expr T_mod expr
   57     | expr T_LogicalAnd expr
   58     | expr T_LogicalOr expr
   59     | expr T_less expr
   60     | expr T_less_equal expr
   61     | expr T_greater expr
   62     | expr T_greater_equal expr
   63     | expr T_equal_equal expr
   64     | expr T_not_equal expr

   65 idid: T_identifier

   66 sc: T_stringLiteral

   67 nc: T_numericConstants

   68 expr_or_empty: expr
   69              | %empty

   70 openflower: T_openFlowerBracket

   71 closeflower: T_closedFlowerBracket


Terminals, with rules where they appear

$end (0) 0
error (256) 14
T_keyword (258)
T_int (259) 1 33 34
T_main (260) 1
T_type (261) 30 31 32
T_return (262)
T_for (263) 15
T_if (264) 17 18
T_else (265) 18 19 20
T_while (266) 16
T_InputStream (267)
T_OutputStream (268)
T_openParenthesis (269) 1 15 16 17 18
T_closedParanthesis (270) 1 15 16 17 18
T_openFlowerBracket (271) 70
T_closedFlowerBracket (272) 71
T_RelationalOperator (273)
T_LogicalOperator (274)
T_UnaryOperator (275)
T_AssignmentOperator (276) 28 30 31 32 33 34
T_Semicolon (277) 6 9 13 14 15 23 24 25
T_identifier (278) 65
T_numericConstants (279) 67
T_stringLiteral (280) 66
T_character (281)
T_plus (282) 36 52
T_minus (283) 37 53
T_mod (284) 40 56
T_divide (285) 38 54
T_multiply (286) 39 55
T_whiteSpace (287)
T_shortHand (288) 29
T_LogicalAnd (289) 41 57
T_LogicalOr (290) 42 58
T_less (291) 43 59
T_less_equal (292) 44 60
T_greater (293) 45 61
T_greater_equal (294) 46 62
T_equal_equal (295) 47 63
T_not_equal (296) 48 64


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
Start (43)
    on left: 1, on right: 0
block_end_flower (44)
    on left: 2 3, on right: 1 4 20
block (45)
    on left: 4 5 6, on right: 15 16 17 18
Multiple_stmts (46)
    on left: 7 8, on right: 2 7 22
stmt (47)
    on left: 9 10 11 12 13 14, on right: 2 5 7
for_stmt (48)
    on left: 15, on right: 12 27
while_stmt (49)
    on left: 16, on right: 11 26
if_stmt (50)
    on left: 17, on right: 10
elseif_else_empty (51)
    on left: 18 19 20 21, on right: 17 18
Multiple_stmts_not_if (52)
    on left: 22 23, on right: 19
stmt_without_if (53)
    on left: 24 25 26 27, on right: 22
Assignment_stmt (54)
    on left: 28 29 30 31 32 33 34, on right: 13 25
expr_without_constants (55)
    on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48, on right: 30
    33
expr (56)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64, on right:
    9 16 17 18 24 28 29 36 37 38 39 40 41 42 43 44 45 46 47 48 52 53
    54 55 56 57 58 59 60 61 62 63 64 68
idid (57)
    on left: 65, on right: 28 29 30 31 32 33 34 35 51
sc (58)
    on left: 66, on right: 31 50
nc (59)
    on left: 67, on right: 32 34 49
expr_or_empty (60)
    on left: 68 69, on right: 15
openflower (61)
    on left: 70, on right: 1 4 20
closeflower (62)
    on left: 71, on right: 3 8


State 0

    0 $accept: . Start $end

    T_int  shift, and go to state 1

    Start  go to state 2


State 1

    1 Start: T_int . T_main T_openParenthesis T_closedParanthesis openflower block_end_flower

    T_main  shift, and go to state 3


State 2

    0 $accept: Start . $end

    $end  shift, and go to state 4


State 3

    1 Start: T_int T_main . T_openParenthesis T_closedParanthesis openflower block_end_flower

    T_openParenthesis  shift, and go to state 5


State 4

    0 $accept: Start $end .

    $default  accept


State 5

    1 Start: T_int T_main T_openParenthesis . T_closedParanthesis openflower block_end_flower

    T_closedParanthesis  shift, and go to state 6


State 6

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis . openflower block_end_flower

    T_openFlowerBracket  shift, and go to state 7

    openflower  go to state 8


State 7

   70 openflower: T_openFlowerBracket .

    $default  reduce using rule 70 (openflower)


State 8

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18

    block_end_flower  go to state 19
    stmt              go to state 20
    for_stmt          go to state 21
    while_stmt        go to state 22
    if_stmt           go to state 23
    Assignment_stmt   go to state 24
    expr              go to state 25
    idid              go to state 26
    sc                go to state 27
    nc                go to state 28
    closeflower       go to state 29


State 9

   14 stmt: error . T_Semicolon

    T_Semicolon  shift, and go to state 30


State 10

   33 Assignment_stmt: T_int . idid T_AssignmentOperator expr_without_constants
   34                | T_int . idid T_AssignmentOperator nc

    T_identifier  shift, and go to state 16

    idid  go to state 31


State 11

   30 Assignment_stmt: T_type . idid T_AssignmentOperator expr_without_constants
   31                | T_type . idid T_AssignmentOperator sc
   32                | T_type . idid T_AssignmentOperator nc

    T_identifier  shift, and go to state 16

    idid  go to state 32


State 12

   15 for_stmt: T_for . T_openParenthesis expr_or_empty T_Semicolon expr_or_empty T_Semicolon expr_or_empty T_closedParanthesis block

    T_openParenthesis  shift, and go to state 33


State 13

   17 if_stmt: T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 34


State 14

   16 while_stmt: T_while . T_openParenthesis expr T_closedParanthesis block

    T_openParenthesis  shift, and go to state 35


State 15

   71 closeflower: T_closedFlowerBracket .

    $default  reduce using rule 71 (closeflower)


State 16

   65 idid: T_identifier .

    $default  reduce using rule 65 (idid)


State 17

   67 nc: T_numericConstants .

    $default  reduce using rule 67 (nc)


State 18

   66 sc: T_stringLiteral .

    $default  reduce using rule 66 (sc)


State 19

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis openflower block_end_flower .

    $default  reduce using rule 1 (Start)


State 20

    2 block_end_flower: stmt . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18

    Multiple_stmts   go to state 36
    stmt             go to state 37
    for_stmt         go to state 21
    while_stmt       go to state 22
    if_stmt          go to state 23
    Assignment_stmt  go to state 24
    expr             go to state 25
    idid             go to state 26
    sc               go to state 27
    nc               go to state 28
    closeflower      go to state 38


State 21

   12 stmt: for_stmt .

    $default  reduce using rule 12 (stmt)


State 22

   11 stmt: while_stmt .

    $default  reduce using rule 11 (stmt)


State 23

   10 stmt: if_stmt .

    $default  reduce using rule 10 (stmt)


State 24

   13 stmt: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 39


State 25

    9 stmt: expr . T_Semicolon
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_Semicolon      shift, and go to state 40
    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_LogicalAnd     shift, and go to state 46
    T_LogicalOr      shift, and go to state 47
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53


State 26

   28 Assignment_stmt: idid . T_AssignmentOperator expr
   29                | idid . T_shortHand expr
   51 expr: idid .

    T_AssignmentOperator  shift, and go to state 54
    T_shortHand           shift, and go to state 55

    $default  reduce using rule 51 (expr)


State 27

   50 expr: sc .

    $default  reduce using rule 50 (expr)


State 28

   49 expr: nc .

    $default  reduce using rule 49 (expr)


State 29

    3 block_end_flower: closeflower .

    $default  reduce using rule 3 (block_end_flower)


State 30

   14 stmt: error T_Semicolon .

    $default  reduce using rule 14 (stmt)


State 31

   33 Assignment_stmt: T_int idid . T_AssignmentOperator expr_without_constants
   34                | T_int idid . T_AssignmentOperator nc

    T_AssignmentOperator  shift, and go to state 56


State 32

   30 Assignment_stmt: T_type idid . T_AssignmentOperator expr_without_constants
   31                | T_type idid . T_AssignmentOperator sc
   32                | T_type idid . T_AssignmentOperator nc

    T_AssignmentOperator  shift, and go to state 57


State 33

   15 for_stmt: T_for T_openParenthesis . expr_or_empty T_Semicolon expr_or_empty T_Semicolon expr_or_empty T_closedParanthesis block

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 69 (expr_or_empty)

    expr           go to state 58
    idid           go to state 59
    sc             go to state 27
    nc             go to state 28
    expr_or_empty  go to state 60


State 34

   17 if_stmt: T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 61
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 35

   16 while_stmt: T_while T_openParenthesis . expr T_closedParanthesis block

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 62
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 36

    2 block_end_flower: stmt Multiple_stmts .

    $default  reduce using rule 2 (block_end_flower)


State 37

    7 Multiple_stmts: stmt . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18

    Multiple_stmts   go to state 63
    stmt             go to state 37
    for_stmt         go to state 21
    while_stmt       go to state 22
    if_stmt          go to state 23
    Assignment_stmt  go to state 24
    expr             go to state 25
    idid             go to state 26
    sc               go to state 27
    nc               go to state 28
    closeflower      go to state 38


State 38

    8 Multiple_stmts: closeflower .

    $default  reduce using rule 8 (Multiple_stmts)


State 39

   13 stmt: Assignment_stmt T_Semicolon .

    $default  reduce using rule 13 (stmt)


State 40

    9 stmt: expr T_Semicolon .

    $default  reduce using rule 9 (stmt)


State 41

   52 expr: expr T_plus . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 64
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 42

   53 expr: expr T_minus . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 65
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 43

   56 expr: expr T_mod . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 66
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 44

   54 expr: expr T_divide . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 67
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 45

   55 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 68
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 46

   57 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 69
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 47

   58 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 70
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 48

   59 expr: expr T_less . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 71
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 49

   60 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 72
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 50

   61 expr: expr T_greater . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 73
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 51

   62 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 74
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 52

   63 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 75
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 53

   64 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 76
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 54

   28 Assignment_stmt: idid T_AssignmentOperator . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 77
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 55

   29 Assignment_stmt: idid T_shortHand . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 78
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 56

   33 Assignment_stmt: T_int idid T_AssignmentOperator . expr_without_constants
   34                | T_int idid T_AssignmentOperator . nc

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr_without_constants  go to state 79
    expr                    go to state 80
    idid                    go to state 81
    sc                      go to state 27
    nc                      go to state 82


State 57

   30 Assignment_stmt: T_type idid T_AssignmentOperator . expr_without_constants
   31                | T_type idid T_AssignmentOperator . sc
   32                | T_type idid T_AssignmentOperator . nc

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr_without_constants  go to state 83
    expr                    go to state 80
    idid                    go to state 81
    sc                      go to state 84
    nc                      go to state 85


State 58

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr
   68 expr_or_empty: expr .

    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_LogicalAnd     shift, and go to state 46
    T_LogicalOr      shift, and go to state 47
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53

    $default  reduce using rule 68 (expr_or_empty)


State 59

   51 expr: idid .

    $default  reduce using rule 51 (expr)


State 60

   15 for_stmt: T_for T_openParenthesis expr_or_empty . T_Semicolon expr_or_empty T_Semicolon expr_or_empty T_closedParanthesis block

    T_Semicolon  shift, and go to state 86


State 61

   17 if_stmt: T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 87
    T_plus               shift, and go to state 41
    T_minus              shift, and go to state 42
    T_mod                shift, and go to state 43
    T_divide             shift, and go to state 44
    T_multiply           shift, and go to state 45
    T_LogicalAnd         shift, and go to state 46
    T_LogicalOr          shift, and go to state 47
    T_less               shift, and go to state 48
    T_less_equal         shift, and go to state 49
    T_greater            shift, and go to state 50
    T_greater_equal      shift, and go to state 51
    T_equal_equal        shift, and go to state 52
    T_not_equal          shift, and go to state 53


State 62

   16 while_stmt: T_while T_openParenthesis expr . T_closedParanthesis block
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 88
    T_plus               shift, and go to state 41
    T_minus              shift, and go to state 42
    T_mod                shift, and go to state 43
    T_divide             shift, and go to state 44
    T_multiply           shift, and go to state 45
    T_LogicalAnd         shift, and go to state 46
    T_LogicalOr          shift, and go to state 47
    T_less               shift, and go to state 48
    T_less_equal         shift, and go to state 49
    T_greater            shift, and go to state 50
    T_greater_equal      shift, and go to state 51
    T_equal_equal        shift, and go to state 52
    T_not_equal          shift, and go to state 53


State 63

    7 Multiple_stmts: stmt Multiple_stmts .

    $default  reduce using rule 7 (Multiple_stmts)


State 64

   52 expr: expr . T_plus expr
   52     | expr T_plus expr .
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 52 (expr)


State 65

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   53     | expr T_minus expr .
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 53 (expr)


State 66

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   56     | expr T_mod expr .
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    $default  reduce using rule 56 (expr)


State 67

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   54     | expr T_divide expr .
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    $default  reduce using rule 54 (expr)


State 68

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   55     | expr T_multiply expr .
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    $default  reduce using rule 55 (expr)


State 69

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   57     | expr T_LogicalAnd expr .
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53

    $default  reduce using rule 57 (expr)


State 70

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   58     | expr T_LogicalOr expr .
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53

    $default  reduce using rule 58 (expr)


State 71

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   59     | expr T_less expr .
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 59 (expr)


State 72

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   60     | expr T_less_equal expr .
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 60 (expr)


State 73

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   61     | expr T_greater expr .
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 61 (expr)


State 74

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   62     | expr T_greater_equal expr .
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 62 (expr)


State 75

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   63     | expr T_equal_equal expr .
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 63 (expr)


State 76

   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr
   64     | expr T_not_equal expr .

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    $default  reduce using rule 64 (expr)


State 77

   28 Assignment_stmt: idid T_AssignmentOperator expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_LogicalAnd     shift, and go to state 46
    T_LogicalOr      shift, and go to state 47
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53

    $default  reduce using rule 28 (Assignment_stmt)


State 78

   29 Assignment_stmt: idid T_shortHand expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_LogicalAnd     shift, and go to state 46
    T_LogicalOr      shift, and go to state 47
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53

    $default  reduce using rule 29 (Assignment_stmt)


State 79

   33 Assignment_stmt: T_int idid T_AssignmentOperator expr_without_constants .

    $default  reduce using rule 33 (Assignment_stmt)


State 80

   36 expr_without_constants: expr . T_plus expr
   37                       | expr . T_minus expr
   38                       | expr . T_divide expr
   39                       | expr . T_multiply expr
   40                       | expr . T_mod expr
   41                       | expr . T_LogicalAnd expr
   42                       | expr . T_LogicalOr expr
   43                       | expr . T_less expr
   44                       | expr . T_less_equal expr
   45                       | expr . T_greater expr
   46                       | expr . T_greater_equal expr
   47                       | expr . T_equal_equal expr
   48                       | expr . T_not_equal expr
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus           shift, and go to state 89
    T_minus          shift, and go to state 90
    T_mod            shift, and go to state 91
    T_divide         shift, and go to state 92
    T_multiply       shift, and go to state 93
    T_LogicalAnd     shift, and go to state 94
    T_LogicalOr      shift, and go to state 95
    T_less           shift, and go to state 96
    T_less_equal     shift, and go to state 97
    T_greater        shift, and go to state 98
    T_greater_equal  shift, and go to state 99
    T_equal_equal    shift, and go to state 100
    T_not_equal      shift, and go to state 101


State 81

   35 expr_without_constants: idid .
   51 expr: idid .

    T_Semicolon  reduce using rule 35 (expr_without_constants)
    $default     reduce using rule 51 (expr)


State 82

   34 Assignment_stmt: T_int idid T_AssignmentOperator nc .
   49 expr: nc .

    T_Semicolon  reduce using rule 34 (Assignment_stmt)
    $default     reduce using rule 49 (expr)


State 83

   30 Assignment_stmt: T_type idid T_AssignmentOperator expr_without_constants .

    $default  reduce using rule 30 (Assignment_stmt)


State 84

   31 Assignment_stmt: T_type idid T_AssignmentOperator sc .
   50 expr: sc .

    T_Semicolon  reduce using rule 31 (Assignment_stmt)
    $default     reduce using rule 50 (expr)


State 85

   32 Assignment_stmt: T_type idid T_AssignmentOperator nc .
   49 expr: nc .

    T_Semicolon  reduce using rule 32 (Assignment_stmt)
    $default     reduce using rule 49 (expr)


State 86

   15 for_stmt: T_for T_openParenthesis expr_or_empty T_Semicolon . expr_or_empty T_Semicolon expr_or_empty T_closedParanthesis block

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 69 (expr_or_empty)

    expr           go to state 58
    idid           go to state 59
    sc             go to state 27
    nc             go to state 28
    expr_or_empty  go to state 102


State 87

   17 if_stmt: T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 103
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18

    block            go to state 104
    stmt             go to state 105
    for_stmt         go to state 21
    while_stmt       go to state 22
    if_stmt          go to state 23
    Assignment_stmt  go to state 24
    expr             go to state 25
    idid             go to state 26
    sc               go to state 27
    nc               go to state 28
    openflower       go to state 106


State 88

   16 while_stmt: T_while T_openParenthesis expr T_closedParanthesis . block

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 103
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18

    block            go to state 107
    stmt             go to state 105
    for_stmt         go to state 21
    while_stmt       go to state 22
    if_stmt          go to state 23
    Assignment_stmt  go to state 24
    expr             go to state 25
    idid             go to state 26
    sc               go to state 27
    nc               go to state 28
    openflower       go to state 106


State 89

   36 expr_without_constants: expr T_plus . expr
   52 expr: expr T_plus . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 108
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 90

   37 expr_without_constants: expr T_minus . expr
   53 expr: expr T_minus . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 109
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 91

   40 expr_without_constants: expr T_mod . expr
   56 expr: expr T_mod . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 110
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 92

   38 expr_without_constants: expr T_divide . expr
   54 expr: expr T_divide . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 111
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 93

   39 expr_without_constants: expr T_multiply . expr
   55 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 112
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 94

   41 expr_without_constants: expr T_LogicalAnd . expr
   57 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 113
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 95

   42 expr_without_constants: expr T_LogicalOr . expr
   58 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 114
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 96

   43 expr_without_constants: expr T_less . expr
   59 expr: expr T_less . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 115
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 97

   44 expr_without_constants: expr T_less_equal . expr
   60 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 116
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 98

   45 expr_without_constants: expr T_greater . expr
   61 expr: expr T_greater . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 117
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 99

   46 expr_without_constants: expr T_greater_equal . expr
   62 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 118
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 100

   47 expr_without_constants: expr T_equal_equal . expr
   63 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 119
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 101

   48 expr_without_constants: expr T_not_equal . expr
   64 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 120
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 102

   15 for_stmt: T_for T_openParenthesis expr_or_empty T_Semicolon expr_or_empty . T_Semicolon expr_or_empty T_closedParanthesis block

    T_Semicolon  shift, and go to state 121


State 103

    6 block: T_Semicolon .

    $default  reduce using rule 6 (block)


State 104

   17 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 122

    T_else    [reduce using rule 21 (elseif_else_empty)]
    $default  reduce using rule 21 (elseif_else_empty)

    elseif_else_empty  go to state 123


State 105

    5 block: stmt .

    $default  reduce using rule 5 (block)


State 106

    4 block: openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18

    block_end_flower  go to state 124
    stmt              go to state 20
    for_stmt          go to state 21
    while_stmt        go to state 22
    if_stmt           go to state 23
    Assignment_stmt   go to state 24
    expr              go to state 25
    idid              go to state 26
    sc                go to state 27
    nc                go to state 28
    closeflower       go to state 29


State 107

   16 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block .

    $default  reduce using rule 16 (while_stmt)


State 108

   36 expr_without_constants: expr T_plus expr .
   52 expr: expr . T_plus expr
   52     | expr T_plus expr .
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 36 (expr_without_constants)
    $default     reduce using rule 52 (expr)


State 109

   37 expr_without_constants: expr T_minus expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   53     | expr T_minus expr .
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 37 (expr_without_constants)
    $default     reduce using rule 53 (expr)


State 110

   40 expr_without_constants: expr T_mod expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   56     | expr T_mod expr .
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_Semicolon  reduce using rule 40 (expr_without_constants)
    $default     reduce using rule 56 (expr)


State 111

   38 expr_without_constants: expr T_divide expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   54     | expr T_divide expr .
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_Semicolon  reduce using rule 38 (expr_without_constants)
    $default     reduce using rule 54 (expr)


State 112

   39 expr_without_constants: expr T_multiply expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   55     | expr T_multiply expr .
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_Semicolon  reduce using rule 39 (expr_without_constants)
    $default     reduce using rule 55 (expr)


State 113

   41 expr_without_constants: expr T_LogicalAnd expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   57     | expr T_LogicalAnd expr .
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53

    T_Semicolon  reduce using rule 41 (expr_without_constants)
    $default     reduce using rule 57 (expr)


State 114

   42 expr_without_constants: expr T_LogicalOr expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   58     | expr T_LogicalOr expr .
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53

    T_Semicolon  reduce using rule 42 (expr_without_constants)
    $default     reduce using rule 58 (expr)


State 115

   43 expr_without_constants: expr T_less expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   59     | expr T_less expr .
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 43 (expr_without_constants)
    $default     reduce using rule 59 (expr)


State 116

   44 expr_without_constants: expr T_less_equal expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   60     | expr T_less_equal expr .
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 44 (expr_without_constants)
    $default     reduce using rule 60 (expr)


State 117

   45 expr_without_constants: expr T_greater expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   61     | expr T_greater expr .
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 45 (expr_without_constants)
    $default     reduce using rule 61 (expr)


State 118

   46 expr_without_constants: expr T_greater_equal expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   62     | expr T_greater_equal expr .
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 46 (expr_without_constants)
    $default     reduce using rule 62 (expr)


State 119

   47 expr_without_constants: expr T_equal_equal expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   63     | expr T_equal_equal expr .
   64     | expr . T_not_equal expr

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 47 (expr_without_constants)
    $default     reduce using rule 63 (expr)


State 120

   48 expr_without_constants: expr T_not_equal expr .
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr
   64     | expr T_not_equal expr .

    T_plus      shift, and go to state 41
    T_minus     shift, and go to state 42
    T_mod       shift, and go to state 43
    T_divide    shift, and go to state 44
    T_multiply  shift, and go to state 45

    T_Semicolon  reduce using rule 48 (expr_without_constants)
    $default     reduce using rule 64 (expr)


State 121

   15 for_stmt: T_for T_openParenthesis expr_or_empty T_Semicolon expr_or_empty T_Semicolon . expr_or_empty T_closedParanthesis block

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 69 (expr_or_empty)

    expr           go to state 58
    idid           go to state 59
    sc             go to state 27
    nc             go to state 28
    expr_or_empty  go to state 125


State 122

   18 elseif_else_empty: T_else . T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   19                  | T_else . Multiple_stmts_not_if
   20                  | T_else . openflower block_end_flower

    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 126
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 127
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18

    for_stmt               go to state 128
    while_stmt             go to state 129
    Multiple_stmts_not_if  go to state 130
    stmt_without_if        go to state 131
    Assignment_stmt        go to state 132
    expr                   go to state 133
    idid                   go to state 26
    sc                     go to state 27
    nc                     go to state 28
    openflower             go to state 134


State 123

   17 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 17 (if_stmt)


State 124

    4 block: openflower block_end_flower .

    $default  reduce using rule 4 (block)


State 125

   15 for_stmt: T_for T_openParenthesis expr_or_empty T_Semicolon expr_or_empty T_Semicolon expr_or_empty . T_closedParanthesis block

    T_closedParanthesis  shift, and go to state 135


State 126

   18 elseif_else_empty: T_else T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 136


State 127

   23 Multiple_stmts_not_if: T_Semicolon .

    $default  reduce using rule 23 (Multiple_stmts_not_if)


State 128

   27 stmt_without_if: for_stmt .

    $default  reduce using rule 27 (stmt_without_if)


State 129

   26 stmt_without_if: while_stmt .

    $default  reduce using rule 26 (stmt_without_if)


State 130

   19 elseif_else_empty: T_else Multiple_stmts_not_if .

    $default  reduce using rule 19 (elseif_else_empty)


State 131

   22 Multiple_stmts_not_if: stmt_without_if . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18

    Multiple_stmts   go to state 137
    stmt             go to state 37
    for_stmt         go to state 21
    while_stmt       go to state 22
    if_stmt          go to state 23
    Assignment_stmt  go to state 24
    expr             go to state 25
    idid             go to state 26
    sc               go to state 27
    nc               go to state 28
    closeflower      go to state 38


State 132

   25 stmt_without_if: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 138


State 133

   24 stmt_without_if: expr . T_Semicolon
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_Semicolon      shift, and go to state 139
    T_plus           shift, and go to state 41
    T_minus          shift, and go to state 42
    T_mod            shift, and go to state 43
    T_divide         shift, and go to state 44
    T_multiply       shift, and go to state 45
    T_LogicalAnd     shift, and go to state 46
    T_LogicalOr      shift, and go to state 47
    T_less           shift, and go to state 48
    T_less_equal     shift, and go to state 49
    T_greater        shift, and go to state 50
    T_greater_equal  shift, and go to state 51
    T_equal_equal    shift, and go to state 52
    T_not_equal      shift, and go to state 53


State 134

   20 elseif_else_empty: T_else openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18

    block_end_flower  go to state 140
    stmt              go to state 20
    for_stmt          go to state 21
    while_stmt        go to state 22
    if_stmt           go to state 23
    Assignment_stmt   go to state 24
    expr              go to state 25
    idid              go to state 26
    sc                go to state 27
    nc                go to state 28
    closeflower       go to state 29


State 135

   15 for_stmt: T_for T_openParenthesis expr_or_empty T_Semicolon expr_or_empty T_Semicolon expr_or_empty T_closedParanthesis . block

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 103
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18

    block            go to state 141
    stmt             go to state 105
    for_stmt         go to state 21
    while_stmt       go to state 22
    if_stmt          go to state 23
    Assignment_stmt  go to state 24
    expr             go to state 25
    idid             go to state 26
    sc               go to state 27
    nc               go to state 28
    openflower       go to state 106


State 136

   18 elseif_else_empty: T_else T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 142
    idid  go to state 59
    sc    go to state 27
    nc    go to state 28


State 137

   22 Multiple_stmts_not_if: stmt_without_if Multiple_stmts .

    $default  reduce using rule 22 (Multiple_stmts_not_if)


State 138

   25 stmt_without_if: Assignment_stmt T_Semicolon .

    $default  reduce using rule 25 (stmt_without_if)


State 139

   24 stmt_without_if: expr T_Semicolon .

    $default  reduce using rule 24 (stmt_without_if)


State 140

   20 elseif_else_empty: T_else openflower block_end_flower .

    $default  reduce using rule 20 (elseif_else_empty)


State 141

   15 for_stmt: T_for T_openParenthesis expr_or_empty T_Semicolon expr_or_empty T_Semicolon expr_or_empty T_closedParanthesis block .

    $default  reduce using rule 15 (for_stmt)


State 142

   18 elseif_else_empty: T_else T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty
   52 expr: expr . T_plus expr
   53     | expr . T_minus expr
   54     | expr . T_divide expr
   55     | expr . T_multiply expr
   56     | expr . T_mod expr
   57     | expr . T_LogicalAnd expr
   58     | expr . T_LogicalOr expr
   59     | expr . T_less expr
   60     | expr . T_less_equal expr
   61     | expr . T_greater expr
   62     | expr . T_greater_equal expr
   63     | expr . T_equal_equal expr
   64     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 143
    T_plus               shift, and go to state 41
    T_minus              shift, and go to state 42
    T_mod                shift, and go to state 43
    T_divide             shift, and go to state 44
    T_multiply           shift, and go to state 45
    T_LogicalAnd         shift, and go to state 46
    T_LogicalOr          shift, and go to state 47
    T_less               shift, and go to state 48
    T_less_equal         shift, and go to state 49
    T_greater            shift, and go to state 50
    T_greater_equal      shift, and go to state 51
    T_equal_equal        shift, and go to state 52
    T_not_equal          shift, and go to state 53


State 143

   18 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 103
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18

    block            go to state 144
    stmt             go to state 105
    for_stmt         go to state 21
    while_stmt       go to state 22
    if_stmt          go to state 23
    Assignment_stmt  go to state 24
    expr             go to state 25
    idid             go to state 26
    sc               go to state 27
    nc               go to state 28
    openflower       go to state 106


State 144

   18 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 122

    T_else    [reduce using rule 21 (elseif_else_empty)]
    $default  reduce using rule 21 (elseif_else_empty)

    elseif_else_empty  go to state 145


State 145

   18 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 18 (elseif_else_empty)

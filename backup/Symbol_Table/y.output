Terminals unused in grammar

   T_keyword
   T_type
   T_return
   T_InputStream
   T_OutputStream
   T_character
   T_whiteSpace
   T_shortHand


State 78 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce


Grammar

    0 $accept: Start $end

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower

    2 block_end_flower: stmt Multiple_stmts
    3                 | T_closedFlowerBracket

    4 block: T_openFlowerBracket block_end_flower
    5      | stmt
    6      | T_Semicolon

    7 Multiple_stmts: stmt Multiple_stmts
    8               | T_closedFlowerBracket

    9 stmt: expr_with_semicolon
   10     | if_stmt
   11     | while_stmt
   12     | for_stmt
   13     | Assignment_stmt T_Semicolon

   14 for_stmt: T_for T_openParenthesis expr_with_semicolon expr_with_semicolon expr_or_empty T_closedParanthesis block

   15 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   18                  | T_else Multiple_stmts_not_if
   19                  | T_else T_openFlowerBracket block_end_flower
   20                  | %empty

   21 Multiple_stmts_not_if: stmt_without_if Multiple_stmts
   22                      | T_Semicolon

   23 stmt_without_if: expr_with_semicolon
   24                | Assignment_stmt T_Semicolon
   25                | while_stmt
   26                | for_stmt

   27 Assignment_stmt: T_identifier T_AssignmentOperator expr

   28 expr: T_numericConstants BinaryOperator T_numericConstants
   29     | T_identifier BinaryOperator T_numericConstants
   30     | T_identifier BinaryOperator T_identifier
   31     | T_UnaryOperator T_identifier
   32     | T_identifier T_UnaryOperator
   33     | T_numericConstants
   34     | T_stringLiteral
   35     | T_identifier

   36 expr_or_empty: expr
   37              | %empty

   38 expr_with_semicolon: T_numericConstants BinaryOperator T_numericConstants T_Semicolon
   39                    | T_identifier BinaryOperator T_numericConstants T_Semicolon
   40                    | T_identifier BinaryOperator T_identifier T_Semicolon
   41                    | T_UnaryOperator T_identifier T_Semicolon
   42                    | T_identifier T_UnaryOperator T_Semicolon
   43                    | T_numericConstants T_Semicolon
   44                    | T_stringLiteral T_Semicolon
   45                    | T_identifier T_Semicolon

   46 ArithmeticOperator: T_plus
   47                   | T_minus
   48                   | T_multiply
   49                   | T_divide
   50                   | T_mod

   51 BinaryOperator: ArithmeticOperator
   52               | T_LogicalOperator
   53               | T_RelationalOperator


Terminals, with rules where they appear

$end (0) 0
error (256)
T_keyword (258)
T_int (259) 1
T_main (260) 1
T_type (261)
T_return (262)
T_for (263) 14
T_if (264) 16 17
T_else (265) 17 18 19
T_while (266) 15
T_InputStream (267)
T_OutputStream (268)
T_openParenthesis (269) 1 14 15 16 17
T_closedParanthesis (270) 1 14 15 16 17
T_openFlowerBracket (271) 1 4 19
T_closedFlowerBracket (272) 3 8
T_RelationalOperator (273) 53
T_LogicalOperator (274) 52
T_UnaryOperator (275) 31 32 41 42
T_AssignmentOperator (276) 27
T_Semicolon (277) 6 13 22 24 38 39 40 41 42 43 44 45
T_identifier (278) 27 29 30 31 32 35 39 40 41 42 45
T_numericConstants (279) 28 29 33 38 39 43
T_stringLiteral (280) 34 44
T_character (281)
T_plus (282) 46
T_minus (283) 47
T_mod (284) 50
T_divide (285) 49
T_multiply (286) 48
T_whiteSpace (287)
T_shortHand (288)


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
Start (35)
    on left: 1, on right: 0
block_end_flower (36)
    on left: 2 3, on right: 1 4 19
block (37)
    on left: 4 5 6, on right: 14 15 16 17
Multiple_stmts (38)
    on left: 7 8, on right: 2 7 21
stmt (39)
    on left: 9 10 11 12 13, on right: 2 5 7
for_stmt (40)
    on left: 14, on right: 12 26
while_stmt (41)
    on left: 15, on right: 11 25
if_stmt (42)
    on left: 16, on right: 10
elseif_else_empty (43)
    on left: 17 18 19 20, on right: 16 17
Multiple_stmts_not_if (44)
    on left: 21 22, on right: 18
stmt_without_if (45)
    on left: 23 24 25 26, on right: 21
Assignment_stmt (46)
    on left: 27, on right: 13 24
expr (47)
    on left: 28 29 30 31 32 33 34 35, on right: 15 16 17 27 36
expr_or_empty (48)
    on left: 36 37, on right: 14
expr_with_semicolon (49)
    on left: 38 39 40 41 42 43 44 45, on right: 9 14 23
ArithmeticOperator (50)
    on left: 46 47 48 49 50, on right: 51
BinaryOperator (51)
    on left: 51 52 53, on right: 28 29 30 38 39 40


State 0

    0 $accept: . Start $end

    T_int  shift, and go to state 1

    Start  go to state 2


State 1

    1 Start: T_int . T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower

    T_main  shift, and go to state 3


State 2

    0 $accept: Start . $end

    $end  shift, and go to state 4


State 3

    1 Start: T_int T_main . T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower

    T_openParenthesis  shift, and go to state 5


State 4

    0 $accept: Start $end .

    $default  accept


State 5

    1 Start: T_int T_main T_openParenthesis . T_closedParanthesis T_openFlowerBracket block_end_flower

    T_closedParanthesis  shift, and go to state 6


State 6

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis . T_openFlowerBracket block_end_flower

    T_openFlowerBracket  shift, and go to state 7


State 7

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket . block_end_flower

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_closedFlowerBracket  shift, and go to state 11
    T_UnaryOperator        shift, and go to state 12
    T_identifier           shift, and go to state 13
    T_numericConstants     shift, and go to state 14
    T_stringLiteral        shift, and go to state 15

    block_end_flower     go to state 16
    stmt                 go to state 17
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 8

   14 for_stmt: T_for . T_openParenthesis expr_with_semicolon expr_with_semicolon expr_or_empty T_closedParanthesis block

    T_openParenthesis  shift, and go to state 23


State 9

   16 if_stmt: T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 24


State 10

   15 while_stmt: T_while . T_openParenthesis expr T_closedParanthesis block

    T_openParenthesis  shift, and go to state 25


State 11

    3 block_end_flower: T_closedFlowerBracket .

    $default  reduce using rule 3 (block_end_flower)


State 12

   41 expr_with_semicolon: T_UnaryOperator . T_identifier T_Semicolon

    T_identifier  shift, and go to state 26


State 13

   27 Assignment_stmt: T_identifier . T_AssignmentOperator expr
   39 expr_with_semicolon: T_identifier . BinaryOperator T_numericConstants T_Semicolon
   40                    | T_identifier . BinaryOperator T_identifier T_Semicolon
   42                    | T_identifier . T_UnaryOperator T_Semicolon
   45                    | T_identifier . T_Semicolon

    T_RelationalOperator  shift, and go to state 27
    T_LogicalOperator     shift, and go to state 28
    T_UnaryOperator       shift, and go to state 29
    T_AssignmentOperator  shift, and go to state 30
    T_Semicolon           shift, and go to state 31
    T_plus                shift, and go to state 32
    T_minus               shift, and go to state 33
    T_mod                 shift, and go to state 34
    T_divide              shift, and go to state 35
    T_multiply            shift, and go to state 36

    ArithmeticOperator  go to state 37
    BinaryOperator      go to state 38


State 14

   38 expr_with_semicolon: T_numericConstants . BinaryOperator T_numericConstants T_Semicolon
   43                    | T_numericConstants . T_Semicolon

    T_RelationalOperator  shift, and go to state 27
    T_LogicalOperator     shift, and go to state 28
    T_Semicolon           shift, and go to state 39
    T_plus                shift, and go to state 32
    T_minus               shift, and go to state 33
    T_mod                 shift, and go to state 34
    T_divide              shift, and go to state 35
    T_multiply            shift, and go to state 36

    ArithmeticOperator  go to state 37
    BinaryOperator      go to state 40


State 15

   44 expr_with_semicolon: T_stringLiteral . T_Semicolon

    T_Semicolon  shift, and go to state 41


State 16

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower .

    $default  reduce using rule 1 (Start)


State 17

    2 block_end_flower: stmt . Multiple_stmts

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_closedFlowerBracket  shift, and go to state 42
    T_UnaryOperator        shift, and go to state 12
    T_identifier           shift, and go to state 13
    T_numericConstants     shift, and go to state 14
    T_stringLiteral        shift, and go to state 15

    Multiple_stmts       go to state 43
    stmt                 go to state 44
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 18

   12 stmt: for_stmt .

    $default  reduce using rule 12 (stmt)


State 19

   11 stmt: while_stmt .

    $default  reduce using rule 11 (stmt)


State 20

   10 stmt: if_stmt .

    $default  reduce using rule 10 (stmt)


State 21

   13 stmt: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 45


State 22

    9 stmt: expr_with_semicolon .

    $default  reduce using rule 9 (stmt)


State 23

   14 for_stmt: T_for T_openParenthesis . expr_with_semicolon expr_with_semicolon expr_or_empty T_closedParanthesis block

    T_UnaryOperator     shift, and go to state 12
    T_identifier        shift, and go to state 46
    T_numericConstants  shift, and go to state 14
    T_stringLiteral     shift, and go to state 15

    expr_with_semicolon  go to state 47


State 24

   16 if_stmt: T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_UnaryOperator     shift, and go to state 48
    T_identifier        shift, and go to state 49
    T_numericConstants  shift, and go to state 50
    T_stringLiteral     shift, and go to state 51

    expr  go to state 52


State 25

   15 while_stmt: T_while T_openParenthesis . expr T_closedParanthesis block

    T_UnaryOperator     shift, and go to state 48
    T_identifier        shift, and go to state 49
    T_numericConstants  shift, and go to state 50
    T_stringLiteral     shift, and go to state 51

    expr  go to state 53


State 26

   41 expr_with_semicolon: T_UnaryOperator T_identifier . T_Semicolon

    T_Semicolon  shift, and go to state 54


State 27

   53 BinaryOperator: T_RelationalOperator .

    $default  reduce using rule 53 (BinaryOperator)


State 28

   52 BinaryOperator: T_LogicalOperator .

    $default  reduce using rule 52 (BinaryOperator)


State 29

   42 expr_with_semicolon: T_identifier T_UnaryOperator . T_Semicolon

    T_Semicolon  shift, and go to state 55


State 30

   27 Assignment_stmt: T_identifier T_AssignmentOperator . expr

    T_UnaryOperator     shift, and go to state 48
    T_identifier        shift, and go to state 49
    T_numericConstants  shift, and go to state 50
    T_stringLiteral     shift, and go to state 51

    expr  go to state 56


State 31

   45 expr_with_semicolon: T_identifier T_Semicolon .

    $default  reduce using rule 45 (expr_with_semicolon)


State 32

   46 ArithmeticOperator: T_plus .

    $default  reduce using rule 46 (ArithmeticOperator)


State 33

   47 ArithmeticOperator: T_minus .

    $default  reduce using rule 47 (ArithmeticOperator)


State 34

   50 ArithmeticOperator: T_mod .

    $default  reduce using rule 50 (ArithmeticOperator)


State 35

   49 ArithmeticOperator: T_divide .

    $default  reduce using rule 49 (ArithmeticOperator)


State 36

   48 ArithmeticOperator: T_multiply .

    $default  reduce using rule 48 (ArithmeticOperator)


State 37

   51 BinaryOperator: ArithmeticOperator .

    $default  reduce using rule 51 (BinaryOperator)


State 38

   39 expr_with_semicolon: T_identifier BinaryOperator . T_numericConstants T_Semicolon
   40                    | T_identifier BinaryOperator . T_identifier T_Semicolon

    T_identifier        shift, and go to state 57
    T_numericConstants  shift, and go to state 58


State 39

   43 expr_with_semicolon: T_numericConstants T_Semicolon .

    $default  reduce using rule 43 (expr_with_semicolon)


State 40

   38 expr_with_semicolon: T_numericConstants BinaryOperator . T_numericConstants T_Semicolon

    T_numericConstants  shift, and go to state 59


State 41

   44 expr_with_semicolon: T_stringLiteral T_Semicolon .

    $default  reduce using rule 44 (expr_with_semicolon)


State 42

    8 Multiple_stmts: T_closedFlowerBracket .

    $default  reduce using rule 8 (Multiple_stmts)


State 43

    2 block_end_flower: stmt Multiple_stmts .

    $default  reduce using rule 2 (block_end_flower)


State 44

    7 Multiple_stmts: stmt . Multiple_stmts

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_closedFlowerBracket  shift, and go to state 42
    T_UnaryOperator        shift, and go to state 12
    T_identifier           shift, and go to state 13
    T_numericConstants     shift, and go to state 14
    T_stringLiteral        shift, and go to state 15

    Multiple_stmts       go to state 60
    stmt                 go to state 44
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 45

   13 stmt: Assignment_stmt T_Semicolon .

    $default  reduce using rule 13 (stmt)


State 46

   39 expr_with_semicolon: T_identifier . BinaryOperator T_numericConstants T_Semicolon
   40                    | T_identifier . BinaryOperator T_identifier T_Semicolon
   42                    | T_identifier . T_UnaryOperator T_Semicolon
   45                    | T_identifier . T_Semicolon

    T_RelationalOperator  shift, and go to state 27
    T_LogicalOperator     shift, and go to state 28
    T_UnaryOperator       shift, and go to state 29
    T_Semicolon           shift, and go to state 31
    T_plus                shift, and go to state 32
    T_minus               shift, and go to state 33
    T_mod                 shift, and go to state 34
    T_divide              shift, and go to state 35
    T_multiply            shift, and go to state 36

    ArithmeticOperator  go to state 37
    BinaryOperator      go to state 38


State 47

   14 for_stmt: T_for T_openParenthesis expr_with_semicolon . expr_with_semicolon expr_or_empty T_closedParanthesis block

    T_UnaryOperator     shift, and go to state 12
    T_identifier        shift, and go to state 46
    T_numericConstants  shift, and go to state 14
    T_stringLiteral     shift, and go to state 15

    expr_with_semicolon  go to state 61


State 48

   31 expr: T_UnaryOperator . T_identifier

    T_identifier  shift, and go to state 62


State 49

   29 expr: T_identifier . BinaryOperator T_numericConstants
   30     | T_identifier . BinaryOperator T_identifier
   32     | T_identifier . T_UnaryOperator
   35     | T_identifier .

    T_RelationalOperator  shift, and go to state 27
    T_LogicalOperator     shift, and go to state 28
    T_UnaryOperator       shift, and go to state 63
    T_plus                shift, and go to state 32
    T_minus               shift, and go to state 33
    T_mod                 shift, and go to state 34
    T_divide              shift, and go to state 35
    T_multiply            shift, and go to state 36

    $default  reduce using rule 35 (expr)

    ArithmeticOperator  go to state 37
    BinaryOperator      go to state 64


State 50

   28 expr: T_numericConstants . BinaryOperator T_numericConstants
   33     | T_numericConstants .

    T_RelationalOperator  shift, and go to state 27
    T_LogicalOperator     shift, and go to state 28
    T_plus                shift, and go to state 32
    T_minus               shift, and go to state 33
    T_mod                 shift, and go to state 34
    T_divide              shift, and go to state 35
    T_multiply            shift, and go to state 36

    $default  reduce using rule 33 (expr)

    ArithmeticOperator  go to state 37
    BinaryOperator      go to state 65


State 51

   34 expr: T_stringLiteral .

    $default  reduce using rule 34 (expr)


State 52

   16 if_stmt: T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty

    T_closedParanthesis  shift, and go to state 66


State 53

   15 while_stmt: T_while T_openParenthesis expr . T_closedParanthesis block

    T_closedParanthesis  shift, and go to state 67


State 54

   41 expr_with_semicolon: T_UnaryOperator T_identifier T_Semicolon .

    $default  reduce using rule 41 (expr_with_semicolon)


State 55

   42 expr_with_semicolon: T_identifier T_UnaryOperator T_Semicolon .

    $default  reduce using rule 42 (expr_with_semicolon)


State 56

   27 Assignment_stmt: T_identifier T_AssignmentOperator expr .

    $default  reduce using rule 27 (Assignment_stmt)


State 57

   40 expr_with_semicolon: T_identifier BinaryOperator T_identifier . T_Semicolon

    T_Semicolon  shift, and go to state 68


State 58

   39 expr_with_semicolon: T_identifier BinaryOperator T_numericConstants . T_Semicolon

    T_Semicolon  shift, and go to state 69


State 59

   38 expr_with_semicolon: T_numericConstants BinaryOperator T_numericConstants . T_Semicolon

    T_Semicolon  shift, and go to state 70


State 60

    7 Multiple_stmts: stmt Multiple_stmts .

    $default  reduce using rule 7 (Multiple_stmts)


State 61

   14 for_stmt: T_for T_openParenthesis expr_with_semicolon expr_with_semicolon . expr_or_empty T_closedParanthesis block

    T_UnaryOperator     shift, and go to state 48
    T_identifier        shift, and go to state 49
    T_numericConstants  shift, and go to state 50
    T_stringLiteral     shift, and go to state 51

    $default  reduce using rule 37 (expr_or_empty)

    expr           go to state 71
    expr_or_empty  go to state 72


State 62

   31 expr: T_UnaryOperator T_identifier .

    $default  reduce using rule 31 (expr)


State 63

   32 expr: T_identifier T_UnaryOperator .

    $default  reduce using rule 32 (expr)


State 64

   29 expr: T_identifier BinaryOperator . T_numericConstants
   30     | T_identifier BinaryOperator . T_identifier

    T_identifier        shift, and go to state 73
    T_numericConstants  shift, and go to state 74


State 65

   28 expr: T_numericConstants BinaryOperator . T_numericConstants

    T_numericConstants  shift, and go to state 75


State 66

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 76
    T_UnaryOperator      shift, and go to state 12
    T_Semicolon          shift, and go to state 77
    T_identifier         shift, and go to state 13
    T_numericConstants   shift, and go to state 14
    T_stringLiteral      shift, and go to state 15

    block                go to state 78
    stmt                 go to state 79
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 67

   15 while_stmt: T_while T_openParenthesis expr T_closedParanthesis . block

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 76
    T_UnaryOperator      shift, and go to state 12
    T_Semicolon          shift, and go to state 77
    T_identifier         shift, and go to state 13
    T_numericConstants   shift, and go to state 14
    T_stringLiteral      shift, and go to state 15

    block                go to state 80
    stmt                 go to state 79
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 68

   40 expr_with_semicolon: T_identifier BinaryOperator T_identifier T_Semicolon .

    $default  reduce using rule 40 (expr_with_semicolon)


State 69

   39 expr_with_semicolon: T_identifier BinaryOperator T_numericConstants T_Semicolon .

    $default  reduce using rule 39 (expr_with_semicolon)


State 70

   38 expr_with_semicolon: T_numericConstants BinaryOperator T_numericConstants T_Semicolon .

    $default  reduce using rule 38 (expr_with_semicolon)


State 71

   36 expr_or_empty: expr .

    $default  reduce using rule 36 (expr_or_empty)


State 72

   14 for_stmt: T_for T_openParenthesis expr_with_semicolon expr_with_semicolon expr_or_empty . T_closedParanthesis block

    T_closedParanthesis  shift, and go to state 81


State 73

   30 expr: T_identifier BinaryOperator T_identifier .

    $default  reduce using rule 30 (expr)


State 74

   29 expr: T_identifier BinaryOperator T_numericConstants .

    $default  reduce using rule 29 (expr)


State 75

   28 expr: T_numericConstants BinaryOperator T_numericConstants .

    $default  reduce using rule 28 (expr)


State 76

    4 block: T_openFlowerBracket . block_end_flower

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_closedFlowerBracket  shift, and go to state 11
    T_UnaryOperator        shift, and go to state 12
    T_identifier           shift, and go to state 13
    T_numericConstants     shift, and go to state 14
    T_stringLiteral        shift, and go to state 15

    block_end_flower     go to state 82
    stmt                 go to state 17
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 77

    6 block: T_Semicolon .

    $default  reduce using rule 6 (block)


State 78

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 83

    T_else    [reduce using rule 20 (elseif_else_empty)]
    $default  reduce using rule 20 (elseif_else_empty)

    elseif_else_empty  go to state 84


State 79

    5 block: stmt .

    $default  reduce using rule 5 (block)


State 80

   15 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block .

    $default  reduce using rule 15 (while_stmt)


State 81

   14 for_stmt: T_for T_openParenthesis expr_with_semicolon expr_with_semicolon expr_or_empty T_closedParanthesis . block

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 76
    T_UnaryOperator      shift, and go to state 12
    T_Semicolon          shift, and go to state 77
    T_identifier         shift, and go to state 13
    T_numericConstants   shift, and go to state 14
    T_stringLiteral      shift, and go to state 15

    block                go to state 85
    stmt                 go to state 79
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 82

    4 block: T_openFlowerBracket block_end_flower .

    $default  reduce using rule 4 (block)


State 83

   17 elseif_else_empty: T_else . T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   18                  | T_else . Multiple_stmts_not_if
   19                  | T_else . T_openFlowerBracket block_end_flower

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 86
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 87
    T_UnaryOperator      shift, and go to state 12
    T_Semicolon          shift, and go to state 88
    T_identifier         shift, and go to state 13
    T_numericConstants   shift, and go to state 14
    T_stringLiteral      shift, and go to state 15

    for_stmt               go to state 89
    while_stmt             go to state 90
    Multiple_stmts_not_if  go to state 91
    stmt_without_if        go to state 92
    Assignment_stmt        go to state 93
    expr_with_semicolon    go to state 94


State 84

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 16 (if_stmt)


State 85

   14 for_stmt: T_for T_openParenthesis expr_with_semicolon expr_with_semicolon expr_or_empty T_closedParanthesis block .

    $default  reduce using rule 14 (for_stmt)


State 86

   17 elseif_else_empty: T_else T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 95


State 87

   19 elseif_else_empty: T_else T_openFlowerBracket . block_end_flower

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_closedFlowerBracket  shift, and go to state 11
    T_UnaryOperator        shift, and go to state 12
    T_identifier           shift, and go to state 13
    T_numericConstants     shift, and go to state 14
    T_stringLiteral        shift, and go to state 15

    block_end_flower     go to state 96
    stmt                 go to state 17
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 88

   22 Multiple_stmts_not_if: T_Semicolon .

    $default  reduce using rule 22 (Multiple_stmts_not_if)


State 89

   26 stmt_without_if: for_stmt .

    $default  reduce using rule 26 (stmt_without_if)


State 90

   25 stmt_without_if: while_stmt .

    $default  reduce using rule 25 (stmt_without_if)


State 91

   18 elseif_else_empty: T_else Multiple_stmts_not_if .

    $default  reduce using rule 18 (elseif_else_empty)


State 92

   21 Multiple_stmts_not_if: stmt_without_if . Multiple_stmts

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_closedFlowerBracket  shift, and go to state 42
    T_UnaryOperator        shift, and go to state 12
    T_identifier           shift, and go to state 13
    T_numericConstants     shift, and go to state 14
    T_stringLiteral        shift, and go to state 15

    Multiple_stmts       go to state 97
    stmt                 go to state 44
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 93

   24 stmt_without_if: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 98


State 94

   23 stmt_without_if: expr_with_semicolon .

    $default  reduce using rule 23 (stmt_without_if)


State 95

   17 elseif_else_empty: T_else T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_UnaryOperator     shift, and go to state 48
    T_identifier        shift, and go to state 49
    T_numericConstants  shift, and go to state 50
    T_stringLiteral     shift, and go to state 51

    expr  go to state 99


State 96

   19 elseif_else_empty: T_else T_openFlowerBracket block_end_flower .

    $default  reduce using rule 19 (elseif_else_empty)


State 97

   21 Multiple_stmts_not_if: stmt_without_if Multiple_stmts .

    $default  reduce using rule 21 (Multiple_stmts_not_if)


State 98

   24 stmt_without_if: Assignment_stmt T_Semicolon .

    $default  reduce using rule 24 (stmt_without_if)


State 99

   17 elseif_else_empty: T_else T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty

    T_closedParanthesis  shift, and go to state 100


State 100

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 76
    T_UnaryOperator      shift, and go to state 12
    T_Semicolon          shift, and go to state 77
    T_identifier         shift, and go to state 13
    T_numericConstants   shift, and go to state 14
    T_stringLiteral      shift, and go to state 15

    block                go to state 101
    stmt                 go to state 79
    for_stmt             go to state 18
    while_stmt           go to state 19
    if_stmt              go to state 20
    Assignment_stmt      go to state 21
    expr_with_semicolon  go to state 22


State 101

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 83

    T_else    [reduce using rule 20 (elseif_else_empty)]
    $default  reduce using rule 20 (elseif_else_empty)

    elseif_else_empty  go to state 102


State 102

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 17 (elseif_else_empty)

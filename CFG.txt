
Notes
+ Square brackets indicate optionality.
+ Curly brackets indicate *

binop ->  	        +
 	            |	–
 	            |	*
 	            |	/

unary ->            --
                |   ++

Relop ->  	        ==
 	            |	!=
 	            |	<=
 	            |	<
 	            |	>=
 	            |	>

Logic_op->          &&
                |   ||
                |   ^

bitwise_op ->       &
                |   |
                |   !

Assignment ->     	id [ '[' expr ']' ] = expr

expr       ->       '–' expr
 	            | 	'!' expr
                |   unary expr
                |   expr Logic_op expr
 	            | 	expr binop expr
 	            | 	expr relop expr
 	            | 	expr logical_op expr
 	            | 	id [ '(' [expr { ',' expr } ] ')' | '[' expr ']' ]
 	            | 	'(' expr ')'

stmt        ->   	if '(' expr ')' stmt [else if '(' expr ')' stmt ][ else stmt ]
                | 	while '(' expr ')' stmt
 	            | 	Assignment ';'
 	            | 	id '(' [expr { ',' expr } ] ')' ';'
 	            | 	'{' { stmt } '}'
 	            | 	';'
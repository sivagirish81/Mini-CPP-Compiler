Terminals unused in grammar

   T_keyword
   T_type
   T_return
   T_InputStream
   T_OutputStream
   T_RelationalOperator
   T_LogicalOperator
   T_UnaryOperator
   T_ArithmeticOperator
   T_AssignmentOperator
   T_BitwiseOperator
   T_identifier
   T_numericConstants
   T_stringLiteral
   T_whiteSpace
   '~'
   '^'
   '&'
   '|'
   '+'
   '-'
   '*'
   '/'
   AND
   OR
   NOT
   EQ
   NOTEQ
   GTE
   LTE
   GT
   LT
   INC
   DEC


State 25 conflicts: 4 shift/reduce
State 38 conflicts: 1 shift/reduce
State 39 conflicts: 4 shift/reduce
State 54 conflicts: 4 shift/reduce
State 63 conflicts: 1 shift/reduce


Grammar

    0 $accept: Start $end

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower

    2 block_end_flower: T_openFlowerBracket block_end_flower
    3                 | stmt Multiple_stmts T_closedFlowerBracket
    4                 | T_closedFlowerBracket

    5 block: T_openFlowerBracket block_end_flower
    6      | stmt Multiple_stmts
    7      | T_Semicolon

    8 Multiple_stmts: stmt Multiple_stmts
    9               | %empty

   10 stmt: T_character T_Semicolon
   11     | if_stmt
   12     | while_stmt
   13     | for_stmt

   14 for_stmt: T_for T_openParenthesis expr T_Semicolon expr T_Semicolon expr T_closedParanthesis block

   15 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   18                  | T_else Multiple_stmts_not_if
   19                  | T_else T_openFlowerBracket block_end_flower
   20                  | %empty

   21 Multiple_stmts_not_if: stmt_without_if Multiple_stmts
   22                      | T_Semicolon

   23 stmt_without_if: T_character T_Semicolon
   24                | while_stmt
   25                | for_stmt

   26 expr: T_character
   27     | %empty


Terminals, with rules where they appear

$end (0) 0
'&' (38)
'*' (42)
'+' (43)
'-' (45)
'/' (47)
'^' (94)
'|' (124)
'~' (126)
error (256)
T_keyword (258)
T_int (259) 1
T_main (260) 1
T_type (261)
T_return (262)
T_for (263) 14
T_if (264) 16 17
T_else (265) 17 18 19
T_while (266) 15
T_InputStream (267)
T_OutputStream (268)
T_openParenthesis (269) 1 14 15 16 17
T_closedParanthesis (270) 1 14 15 16 17
T_openFlowerBracket (271) 1 2 5 19
T_closedFlowerBracket (272) 3 4
T_RelationalOperator (273)
T_LogicalOperator (274)
T_UnaryOperator (275)
T_ArithmeticOperator (276)
T_AssignmentOperator (277)
T_BitwiseOperator (278)
T_Semicolon (279) 7 10 14 22 23
T_identifier (280)
T_numericConstants (281)
T_stringLiteral (282)
T_character (283) 10 23 26
T_whiteSpace (284)
AND (285)
OR (286)
NOT (287)
EQ (288)
NOTEQ (289)
GTE (290)
LTE (291)
GT (292)
LT (293)
INC (294)
DEC (295)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
Start (50)
    on left: 1, on right: 0
block_end_flower (51)
    on left: 2 3 4, on right: 1 2 5 19
block (52)
    on left: 5 6 7, on right: 14 15 16 17
Multiple_stmts (53)
    on left: 8 9, on right: 3 6 8 21
stmt (54)
    on left: 10 11 12 13, on right: 3 6 8
for_stmt (55)
    on left: 14, on right: 13 25
while_stmt (56)
    on left: 15, on right: 12 24
if_stmt (57)
    on left: 16, on right: 11
elseif_else_empty (58)
    on left: 17 18 19 20, on right: 16 17
Multiple_stmts_not_if (59)
    on left: 21 22, on right: 18
stmt_without_if (60)
    on left: 23 24 25, on right: 21
expr (61)
    on left: 26 27, on right: 14 15 16 17


State 0

    0 $accept: . Start $end

    T_int  shift, and go to state 1

    Start  go to state 2


State 1

    1 Start: T_int . T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower

    T_main  shift, and go to state 3


State 2

    0 $accept: Start . $end

    $end  shift, and go to state 4


State 3

    1 Start: T_int T_main . T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower

    T_openParenthesis  shift, and go to state 5


State 4

    0 $accept: Start $end .

    $default  accept


State 5

    1 Start: T_int T_main T_openParenthesis . T_closedParanthesis T_openFlowerBracket block_end_flower

    T_closedParanthesis  shift, and go to state 6


State 6

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis . T_openFlowerBracket block_end_flower

    T_openFlowerBracket  shift, and go to state 7


State 7

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket . block_end_flower

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_openFlowerBracket    shift, and go to state 11
    T_closedFlowerBracket  shift, and go to state 12
    T_character            shift, and go to state 13

    block_end_flower  go to state 14
    stmt              go to state 15
    for_stmt          go to state 16
    while_stmt        go to state 17
    if_stmt           go to state 18


State 8

   14 for_stmt: T_for . T_openParenthesis expr T_Semicolon expr T_Semicolon expr T_closedParanthesis block

    T_openParenthesis  shift, and go to state 19


State 9

   16 if_stmt: T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 20


State 10

   15 while_stmt: T_while . T_openParenthesis expr T_closedParanthesis block

    T_openParenthesis  shift, and go to state 21


State 11

    2 block_end_flower: T_openFlowerBracket . block_end_flower

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_openFlowerBracket    shift, and go to state 11
    T_closedFlowerBracket  shift, and go to state 12
    T_character            shift, and go to state 13

    block_end_flower  go to state 22
    stmt              go to state 15
    for_stmt          go to state 16
    while_stmt        go to state 17
    if_stmt           go to state 18


State 12

    4 block_end_flower: T_closedFlowerBracket .

    $default  reduce using rule 4 (block_end_flower)


State 13

   10 stmt: T_character . T_Semicolon

    T_Semicolon  shift, and go to state 23


State 14

    1 Start: T_int T_main T_openParenthesis T_closedParanthesis T_openFlowerBracket block_end_flower .

    $default  reduce using rule 1 (Start)


State 15

    3 block_end_flower: stmt . Multiple_stmts T_closedFlowerBracket

    T_for        shift, and go to state 8
    T_if         shift, and go to state 9
    T_while      shift, and go to state 10
    T_character  shift, and go to state 13

    $default  reduce using rule 9 (Multiple_stmts)

    Multiple_stmts  go to state 24
    stmt            go to state 25
    for_stmt        go to state 16
    while_stmt      go to state 17
    if_stmt         go to state 18


State 16

   13 stmt: for_stmt .

    $default  reduce using rule 13 (stmt)


State 17

   12 stmt: while_stmt .

    $default  reduce using rule 12 (stmt)


State 18

   11 stmt: if_stmt .

    $default  reduce using rule 11 (stmt)


State 19

   14 for_stmt: T_for T_openParenthesis . expr T_Semicolon expr T_Semicolon expr T_closedParanthesis block

    T_character  shift, and go to state 26

    $default  reduce using rule 27 (expr)

    expr  go to state 27


State 20

   16 if_stmt: T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_character  shift, and go to state 26

    $default  reduce using rule 27 (expr)

    expr  go to state 28


State 21

   15 while_stmt: T_while T_openParenthesis . expr T_closedParanthesis block

    T_character  shift, and go to state 26

    $default  reduce using rule 27 (expr)

    expr  go to state 29


State 22

    2 block_end_flower: T_openFlowerBracket block_end_flower .

    $default  reduce using rule 2 (block_end_flower)


State 23

   10 stmt: T_character T_Semicolon .

    $default  reduce using rule 10 (stmt)


State 24

    3 block_end_flower: stmt Multiple_stmts . T_closedFlowerBracket

    T_closedFlowerBracket  shift, and go to state 30


State 25

    8 Multiple_stmts: stmt . Multiple_stmts

    T_for        shift, and go to state 8
    T_if         shift, and go to state 9
    T_while      shift, and go to state 10
    T_character  shift, and go to state 13

    T_for        [reduce using rule 9 (Multiple_stmts)]
    T_if         [reduce using rule 9 (Multiple_stmts)]
    T_while      [reduce using rule 9 (Multiple_stmts)]
    T_character  [reduce using rule 9 (Multiple_stmts)]
    $default     reduce using rule 9 (Multiple_stmts)

    Multiple_stmts  go to state 31
    stmt            go to state 25
    for_stmt        go to state 16
    while_stmt      go to state 17
    if_stmt         go to state 18


State 26

   26 expr: T_character .

    $default  reduce using rule 26 (expr)


State 27

   14 for_stmt: T_for T_openParenthesis expr . T_Semicolon expr T_Semicolon expr T_closedParanthesis block

    T_Semicolon  shift, and go to state 32


State 28

   16 if_stmt: T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty

    T_closedParanthesis  shift, and go to state 33


State 29

   15 while_stmt: T_while T_openParenthesis expr . T_closedParanthesis block

    T_closedParanthesis  shift, and go to state 34


State 30

    3 block_end_flower: stmt Multiple_stmts T_closedFlowerBracket .

    $default  reduce using rule 3 (block_end_flower)


State 31

    8 Multiple_stmts: stmt Multiple_stmts .

    $default  reduce using rule 8 (Multiple_stmts)


State 32

   14 for_stmt: T_for T_openParenthesis expr T_Semicolon . expr T_Semicolon expr T_closedParanthesis block

    T_character  shift, and go to state 26

    $default  reduce using rule 27 (expr)

    expr  go to state 35


State 33

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 36
    T_Semicolon          shift, and go to state 37
    T_character          shift, and go to state 13

    block       go to state 38
    stmt        go to state 39
    for_stmt    go to state 16
    while_stmt  go to state 17
    if_stmt     go to state 18


State 34

   15 while_stmt: T_while T_openParenthesis expr T_closedParanthesis . block

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 36
    T_Semicolon          shift, and go to state 37
    T_character          shift, and go to state 13

    block       go to state 40
    stmt        go to state 39
    for_stmt    go to state 16
    while_stmt  go to state 17
    if_stmt     go to state 18


State 35

   14 for_stmt: T_for T_openParenthesis expr T_Semicolon expr . T_Semicolon expr T_closedParanthesis block

    T_Semicolon  shift, and go to state 41


State 36

    5 block: T_openFlowerBracket . block_end_flower

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_openFlowerBracket    shift, and go to state 11
    T_closedFlowerBracket  shift, and go to state 12
    T_character            shift, and go to state 13

    block_end_flower  go to state 42
    stmt              go to state 15
    for_stmt          go to state 16
    while_stmt        go to state 17
    if_stmt           go to state 18


State 37

    7 block: T_Semicolon .

    $default  reduce using rule 7 (block)


State 38

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 43

    T_else    [reduce using rule 20 (elseif_else_empty)]
    $default  reduce using rule 20 (elseif_else_empty)

    elseif_else_empty  go to state 44


State 39

    6 block: stmt . Multiple_stmts

    T_for        shift, and go to state 8
    T_if         shift, and go to state 9
    T_while      shift, and go to state 10
    T_character  shift, and go to state 13

    T_for        [reduce using rule 9 (Multiple_stmts)]
    T_if         [reduce using rule 9 (Multiple_stmts)]
    T_while      [reduce using rule 9 (Multiple_stmts)]
    T_character  [reduce using rule 9 (Multiple_stmts)]
    $default     reduce using rule 9 (Multiple_stmts)

    Multiple_stmts  go to state 45
    stmt            go to state 25
    for_stmt        go to state 16
    while_stmt      go to state 17
    if_stmt         go to state 18


State 40

   15 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block .

    $default  reduce using rule 15 (while_stmt)


State 41

   14 for_stmt: T_for T_openParenthesis expr T_Semicolon expr T_Semicolon . expr T_closedParanthesis block

    T_character  shift, and go to state 26

    $default  reduce using rule 27 (expr)

    expr  go to state 46


State 42

    5 block: T_openFlowerBracket block_end_flower .

    $default  reduce using rule 5 (block)


State 43

   17 elseif_else_empty: T_else . T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   18                  | T_else . Multiple_stmts_not_if
   19                  | T_else . T_openFlowerBracket block_end_flower

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 47
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 48
    T_Semicolon          shift, and go to state 49
    T_character          shift, and go to state 50

    for_stmt               go to state 51
    while_stmt             go to state 52
    Multiple_stmts_not_if  go to state 53
    stmt_without_if        go to state 54


State 44

   16 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 16 (if_stmt)


State 45

    6 block: stmt Multiple_stmts .

    $default  reduce using rule 6 (block)


State 46

   14 for_stmt: T_for T_openParenthesis expr T_Semicolon expr T_Semicolon expr . T_closedParanthesis block

    T_closedParanthesis  shift, and go to state 55


State 47

   17 elseif_else_empty: T_else T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 56


State 48

   19 elseif_else_empty: T_else T_openFlowerBracket . block_end_flower

    T_for                  shift, and go to state 8
    T_if                   shift, and go to state 9
    T_while                shift, and go to state 10
    T_openFlowerBracket    shift, and go to state 11
    T_closedFlowerBracket  shift, and go to state 12
    T_character            shift, and go to state 13

    block_end_flower  go to state 57
    stmt              go to state 15
    for_stmt          go to state 16
    while_stmt        go to state 17
    if_stmt           go to state 18


State 49

   22 Multiple_stmts_not_if: T_Semicolon .

    $default  reduce using rule 22 (Multiple_stmts_not_if)


State 50

   23 stmt_without_if: T_character . T_Semicolon

    T_Semicolon  shift, and go to state 58


State 51

   25 stmt_without_if: for_stmt .

    $default  reduce using rule 25 (stmt_without_if)


State 52

   24 stmt_without_if: while_stmt .

    $default  reduce using rule 24 (stmt_without_if)


State 53

   18 elseif_else_empty: T_else Multiple_stmts_not_if .

    $default  reduce using rule 18 (elseif_else_empty)


State 54

   21 Multiple_stmts_not_if: stmt_without_if . Multiple_stmts

    T_for        shift, and go to state 8
    T_if         shift, and go to state 9
    T_while      shift, and go to state 10
    T_character  shift, and go to state 13

    T_for        [reduce using rule 9 (Multiple_stmts)]
    T_if         [reduce using rule 9 (Multiple_stmts)]
    T_while      [reduce using rule 9 (Multiple_stmts)]
    T_character  [reduce using rule 9 (Multiple_stmts)]
    $default     reduce using rule 9 (Multiple_stmts)

    Multiple_stmts  go to state 59
    stmt            go to state 25
    for_stmt        go to state 16
    while_stmt      go to state 17
    if_stmt         go to state 18


State 55

   14 for_stmt: T_for T_openParenthesis expr T_Semicolon expr T_Semicolon expr T_closedParanthesis . block

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 36
    T_Semicolon          shift, and go to state 37
    T_character          shift, and go to state 13

    block       go to state 60
    stmt        go to state 39
    for_stmt    go to state 16
    while_stmt  go to state 17
    if_stmt     go to state 18


State 56

   17 elseif_else_empty: T_else T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_character  shift, and go to state 26

    $default  reduce using rule 27 (expr)

    expr  go to state 61


State 57

   19 elseif_else_empty: T_else T_openFlowerBracket block_end_flower .

    $default  reduce using rule 19 (elseif_else_empty)


State 58

   23 stmt_without_if: T_character T_Semicolon .

    $default  reduce using rule 23 (stmt_without_if)


State 59

   21 Multiple_stmts_not_if: stmt_without_if Multiple_stmts .

    $default  reduce using rule 21 (Multiple_stmts_not_if)


State 60

   14 for_stmt: T_for T_openParenthesis expr T_Semicolon expr T_Semicolon expr T_closedParanthesis block .

    $default  reduce using rule 14 (for_stmt)


State 61

   17 elseif_else_empty: T_else T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty

    T_closedParanthesis  shift, and go to state 62


State 62

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    T_for                shift, and go to state 8
    T_if                 shift, and go to state 9
    T_while              shift, and go to state 10
    T_openFlowerBracket  shift, and go to state 36
    T_Semicolon          shift, and go to state 37
    T_character          shift, and go to state 13

    block       go to state 63
    stmt        go to state 39
    for_stmt    go to state 16
    while_stmt  go to state 17
    if_stmt     go to state 18


State 63

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 43

    T_else    [reduce using rule 20 (elseif_else_empty)]
    $default  reduce using rule 20 (elseif_else_empty)

    elseif_else_empty  go to state 64


State 64

   17 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 17 (elseif_else_empty)
